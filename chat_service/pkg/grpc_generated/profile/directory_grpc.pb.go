// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: directory.proto

package profile

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserDirectory_UserExists_FullMethodName = "/auth.UserDirectory/UserExists"
	UserDirectory_UsersExist_FullMethodName = "/auth.UserDirectory/UsersExist"
)

// UserDirectoryClient is the client API for UserDirectory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDirectoryClient interface {
	UserExists(ctx context.Context, in *UserExistsRequest, opts ...grpc.CallOption) (*UserExistsResponse, error)
	UsersExist(ctx context.Context, in *UsersExistRequest, opts ...grpc.CallOption) (*UsersExistResponse, error)
}

type userDirectoryClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDirectoryClient(cc grpc.ClientConnInterface) UserDirectoryClient {
	return &userDirectoryClient{cc}
}

func (c *userDirectoryClient) UserExists(ctx context.Context, in *UserExistsRequest, opts ...grpc.CallOption) (*UserExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserExistsResponse)
	err := c.cc.Invoke(ctx, UserDirectory_UserExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDirectoryClient) UsersExist(ctx context.Context, in *UsersExistRequest, opts ...grpc.CallOption) (*UsersExistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsersExistResponse)
	err := c.cc.Invoke(ctx, UserDirectory_UsersExist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDirectoryServer is the server API for UserDirectory service.
// All implementations must embed UnimplementedUserDirectoryServer
// for forward compatibility.
type UserDirectoryServer interface {
	UserExists(context.Context, *UserExistsRequest) (*UserExistsResponse, error)
	UsersExist(context.Context, *UsersExistRequest) (*UsersExistResponse, error)
	mustEmbedUnimplementedUserDirectoryServer()
}

// UnimplementedUserDirectoryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserDirectoryServer struct{}

func (UnimplementedUserDirectoryServer) UserExists(context.Context, *UserExistsRequest) (*UserExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserExists not implemented")
}
func (UnimplementedUserDirectoryServer) UsersExist(context.Context, *UsersExistRequest) (*UsersExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersExist not implemented")
}
func (UnimplementedUserDirectoryServer) mustEmbedUnimplementedUserDirectoryServer() {}
func (UnimplementedUserDirectoryServer) testEmbeddedByValue()                       {}

// UnsafeUserDirectoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDirectoryServer will
// result in compilation errors.
type UnsafeUserDirectoryServer interface {
	mustEmbedUnimplementedUserDirectoryServer()
}

func RegisterUserDirectoryServer(s grpc.ServiceRegistrar, srv UserDirectoryServer) {
	// If the following call pancis, it indicates UnimplementedUserDirectoryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserDirectory_ServiceDesc, srv)
}

func _UserDirectory_UserExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDirectoryServer).UserExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDirectory_UserExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDirectoryServer).UserExists(ctx, req.(*UserExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDirectory_UsersExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDirectoryServer).UsersExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDirectory_UsersExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDirectoryServer).UsersExist(ctx, req.(*UsersExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserDirectory_ServiceDesc is the grpc.ServiceDesc for UserDirectory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDirectory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.UserDirectory",
	HandlerType: (*UserDirectoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserExists",
			Handler:    _UserDirectory_UserExists_Handler,
		},
		{
			MethodName: "UsersExist",
			Handler:    _UserDirectory_UsersExist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "directory.proto",
}
