basePath: /api/v1
definitions:
  api_dto.CreateUserRequest:
    properties:
      name:
        type: string
      email:
        type: string
      password:
        type: string
    required:
    - name
    - email
    - password
    type: object
  api_dto.UpdateUserRequest:
    properties:
      name:
        type: string
      email:
        type: string
      password:
        type: string
    type: object
  api_dto.UserViewListResponse:
    properties:
      total:
        type: integer
      limit:
        type: integer
      offset:
        type: integer
      users:
        items:
          $ref: '#/definitions/api_dto.UserViewResponse'
        type: array
    type: object
  api_dto.UserViewResponse:
    properties:
      id:
        type: integer
      username:
        type: string
      email:
        type: string
      created_at:
        type: string
    type: object
  utils.ErrorResponse:
    properties:
      error:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API для управления пользователями
  title: ProfileService API
  version: "1.0"
paths:
  /users:
    get:
      consumes:
      - application/json
      description: Возвращает список пользователей с возможностью фильтрации
      parameters:
      - description: Фильтр по имени
        in: query
        name: name
        type: string
      - description: Фильтр по email
        in: query
        name: email
        type: string
      - description: Лимит записей
        in: query
        name: limit
        type: integer
      - description: Смещение
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Успешный запрос
          schema:
            $ref: '#/definitions/api_dto.UserViewListResponse'
        "400":
          description: Неверные параметры фильтрации
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Получить отфильтрованный список пользователей
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Создает нового пользователя с указанными данными
      parameters:
      - description: Данные для создания пользователя
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api_dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: ID созданного пользователя
          schema:
            type: int
        "400":
          description: Неверные данные пользователя
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Создать нового пользователя
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Удаляет пользователя по указанному ID
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Пользователь успешно удален
        "400":
          description: Неверный ID пользователя
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Удалить пользователя
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Возвращает информацию о пользователе по его идентификатору
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Успешный запрос
          schema:
            $ref: '#/definitions/api_dto.UserViewResponse'
        "400":
          description: Неверный ID пользователя
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Получить пользователя по ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Обновляет информацию о пользователе по его ID
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      - description: Новые данные пользователя
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api_dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "204":
          description: Данные успешно обновлены
        "400":
          description: Неверные данные запроса
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Пользователь не найден
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Обновить данные пользователя
      tags:
      - Users
swagger: "2.0"
